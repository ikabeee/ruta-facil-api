// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            Int            @id @default(autoincrement())
    name          String
    lastName      String?        @map("last_name")
    email         String         @unique
    password      String
    phone         String?
    role          UserRole       @default(USER)
    status        UserStatus     @default(PENDING)
    emailVerified Boolean        @default(false) @map("email_verified")
    lastAccess    DateTime?      @map("last_access")
    permissions   String[]       @default([])
    createdAt     DateTime       @default(now()) @map("created_at")
    updatedAt     DateTime?      @updatedAt @map("updated_at")
    notifications Notification[]
    starredRoutes StarredRoute[]
    ratings       Rating[]

    @@map("users")
}

model StarredRoute {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    routeId     Int      @map("route_id")
    userId      Int      @map("user_id")
    routes      Route    @relation(fields: [routeId], references: [id])
    users       User     @relation(fields: [userId], references: [id])
    createdAt   DateTime @default(now()) @map("created_at")

    @@map("starred_routes")
}

model Rating {
    id          Int          @id @default(autoincrement())
    title       String
    description String?
    rating      Float        @default(0)
    maxRating   Int          @default(5) @map("max_rating")
    category    String?
    comment     String?
    userType    String?      @map("user_type")
    service     String?
    route       String?
    driver      String?
    unit        String?
    createdAt   DateTime     @default(now()) @map("created_at")
    updatedAt   DateTime?    @updatedAt @map("updated_at")
    status      RatingStatus @default(ACTIVE)
    User        User?        @relation(fields: [userId], references: [id])
    userId      Int?
    Vehicle     Vehicle?     @relation(fields: [vehicleId], references: [id])
    vehicleId   Int?

    @@map("ratings")
}

model Route {
    id            Int            @id @default(autoincrement())
    code          String?        @unique
    name          String
    img           String?
    firstPoint    String         @map("first_point")
    lastPoint     String         @map("last_point")
    description   String?
    distance      Float?
    estimatedTime Int?           @map("estimated_time")
    totalStops    Int            @default(0) @map("total_stops")
    assignedUnits Int            @default(0) @map("assigned_units")
    dailyTrips    Int            @default(0) @map("daily_trips")
    operatingHours String?       @map("operating_hours")
    status        RouteStatus    @default(ACTIVE)
    createdAt     DateTime       @default(now()) @map("created_at")
    updatedAt     DateTime?      @updatedAt @map("updated_at")
    vehicleId     Int?           @map("vehicle_id")
    vehicle       Vehicle?       @relation(fields: [vehicleId], references: [id])
    incidents     Incident[]
    starredRoutes StarredRoute[]
    routeStops    RouteStop[]
    schedules     Schedule[]

    @@map("routes")
}

model Incident {
    id          Int             @id @default(autoincrement())
    type        String?
    title       String
    description String
    priority    IncidentPriority @default(MEDIUM)
    location    String?
    unit        String?
    reportedBy  String?
    status      IncidentStatus   @default(PENDING)
    createdAt   DateTime         @default(now()) @map("created_at")
    updatedAt   DateTime?        @updatedAt @map("updated_at")
    routeId     Int              @map("route_id")
    route       Route            @relation(fields: [routeId], references: [id])

    @@map("incidents")
}

model Stop {
    id           Int         @id @default(autoincrement())
    name         String
    address      String?
    lat          Float
    lng          Float
    facilities   String?
    accessibility String?
    status       StopStatus  @default(ACTIVE)
    img          String?
    createdAt    DateTime    @default(now()) @map("created_at")
    routeStops   RouteStop[]
    routeId      Int?

    @@map("stops")
}

model RouteStop {
    id        Int       @id @default(autoincrement())
    routeId   Int       @map("route_id")
    stopId    Int       @map("stop_id")
    order     Int
    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")
    route     Route     @relation(fields: [routeId], references: [id])
    stop      Stop      @relation(fields: [stopId], references: [id])

    @@map("route_stops")
}

model Vehicle {
    id                 Int                 @id @default(autoincrement())
    name               String
    plate              String              @unique
    model              String?
    color              String?
    year               Int?
    passengers         Int?
    fuel               Float?              @default(100)
    mileage            Int?                @default(0)
    nextMaintenance    DateTime?           @map("next_maintenance")
    img                String?
    ownerId            Int                 @map("owner_id")
    createdAt          DateTime            @default(now()) @map("created_at")
    updatedAt          DateTime?           @updatedAt @map("updated_at")
    ownerVehicleId     Int?                @map("owner_vehicle_id")
    OwnerVehicle       OwnerVehicle?       @relation(fields: [ownerVehicleId], references: [id])
    vehicleAssignments VehicleAssignment[]
    ratings            Rating[]
    routes             Route[]
    vehicleLocations   VehicleLocation[]

    @@map("vehicles")
}

model VehicleLocation {
    id         Int      @id @default(autoincrement())
    lat        Float
    lng        Float
    recordedAt DateTime @default(now()) @map("recorded_at")
    vehicleId  Int      @map("vehicle_id")
    vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])

    @@map("vehicle_locations")
}

model VehicleAssignment {
    id        Int       @id @default(autoincrement())
    vehicleId Int       @map("vehicle_id")
    routeId   Int       @map("route_id")
    driverId  Int       @map("driver_id")
    startTime DateTime
    endTime   DateTime?
    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")
    Vehicle   Vehicle   @relation(fields: [vehicleId], references: [id])
    Driver    Driver    @relation(fields: [driverId], references: [id])

    @@map("vehicle_assignments")
}

model OwnerVehicle {
    id            Int            @id @default(autoincrement())
    userId        Int            @map("user_id")
    company       String?
    contact       String?
    rfc           String?
    address       String?
    totalVehicles Int            @default(0) @map("total_vehicles")
    lastPayment   DateTime?      @map("last_payment")
    createdAt     DateTime       @default(now()) @map("created_at")
    updatedAt     DateTime?      @updatedAt @map("updated_at")
    isVerified    Boolean        @default(false) @map("is_verified")
    notifications Notification[]
    vehicles      Vehicle[]

    @@map("owner_vehicles")
}

model Driver {
    id                 Int                 @id @default(autoincrement())
    userId             Int                 @map("user_id")
    license            String?
    licenseExpiration  DateTime?           @map("license_expiration")
    experience         String?
    rating             Float?              @default(0)
    totalTrips         Int                 @default(0) @map("total_trips")
    createdAt          DateTime            @default(now()) @map("created_at")
    updatedAt          DateTime?           @updatedAt @map("updated_at")
    isVerified         Boolean             @default(false) @map("is_verified")
    notifications      Notification[]
    vehicleAssignments VehicleAssignment[]

    @@map("drivers")
}

model Notification {
    id             Int           @id @default(autoincrement())
    title          String
    message        String
    isRead         Boolean       @default(false) @map("is_read")
    createdAt      DateTime      @default(now()) @map("created_at")
    updatedAt      DateTime?     @updatedAt @map("updated_at")
    driverId       Int?          @map("driver_id")
    userId         Int           @map("user_id")
    ownerVehicleId Int?          @map("owner_vehicle_id")
    User           User?         @relation(fields: [userId], references: [id])
    OwnerVehicle   OwnerVehicle? @relation(fields: [ownerVehicleId], references: [id])
    Driver         Driver?       @relation(fields: [driverId], references: [id])

    @@map("notifications")
}

model Schedule {
    id          Int            @id @default(autoincrement())
    routeId     Int            @map("route_id")
    startTime   String         @map("start_time")
    endTime     String         @map("end_time")
    frequency   String?
    days        String?
    totalTrips  Int            @default(0) @map("total_trips")
    status      ScheduleStatus @default(ACTIVE)
    createdAt   DateTime       @default(now()) @map("created_at")
    updatedAt   DateTime?      @updatedAt @map("updated_at")
    route       Route          @relation(fields: [routeId], references: [id])

    @@map("schedules")
}

enum UserRole {
    ADMIN
    DRIVER
    OWNER_VEHICLE
    USER
}

enum UserStatus {
    ACTIVE
    INACTIVE
    PENDING
    BAN
}

enum RatingStatus {
    ACTIVE
    INACTIVE
    BAN
}

enum RouteStatus {
    ACTIVE
    INACTIVE
    IN_REVIEW
    SUSPENDED
}

enum StopStatus {
    ACTIVE
    INACTIVE
    MAINTENANCE
}

enum ScheduleStatus {
    ACTIVE
    SUSPENDED
}

enum IncidentStatus {
    PENDING
    IN_PROGRESS
    RESOLVED
    CANCELLED
}

enum IncidentPriority {
    LOW
    MEDIUM
    HIGH
    CRITICAL
}